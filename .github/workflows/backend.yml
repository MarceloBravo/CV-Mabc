name: backend                                                             # Nombre del flujo de trabajo
on:                                                                       # Configuración de activadores
  push:                                                                   # Activar en eventos de push
    branches: [main, develop]                                             # Ramas objetivo para el push
  pull_request:                                                           # Activar en eventos de pull request
    branches: [main, develop]                                             # Ramas objetivo para el pull request
jobs:                                                                     # Definición de los trabajos
  test:                                                                   # Trabajo de pruebas
    name: Test API en Node.js ${{ matrix.node }}                          # Nombre del trabajo con la versión de Node.js
    runs-on: ubuntu-latest                                                # Sistema operativo en el que se ejecutará
    services:
      postgres:
        image: postgres:15
        ports:
          - 5433:5432
        env:
          POSTGRES_DB: mabc_cv_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    strategy:                                                             # Estrategia de matriz
      matrix:                                                             # Definición de matriz
        node: [22.x]                                                # Versiones de Node.js a probar
    steps:                                                                # Pasos del trabajo
      - name: Set environment variables for CI database
        run: |
          echo "DB_USER=postgres" >> $GITHUB_ENV
          echo "DB_PASS=postgres" >> $GITHUB_ENV
          echo "DB_NAME=mabc_cv_test" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5433" >> $GITHUB_ENV
      - name: Checkout del código                                         # Nombre del paso
        uses: actions/checkout@v3                                         # Acción para clonar el repositorio
      - name: Configurar Node.js                                          # Nombre del paso
        uses: actions/setup-node@v3                                       # Acción para configurar Node.js
        with:                                                             # Parámetros de configuración
          node-version: ${{ matrix.node }}                                # Versión de Node.js según la matriz
      - name: Cachear dependencias npm                                    # Nombre del paso
        uses: actions/cache@v3                                            # Acción para cachear dependencias
        with:                                                             # Parámetros de configuración
          path: ~/.npm                                                    # Ruta del caché
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # Clave del caché basada en el sistema operativo y el archivo de bloqueo
          restore-keys: |                                                 # Claves de restauración
            ${{ runner.os }}-node-                                        # Prefijo de restauración
      - name: Instalar dependencias                                       # Nombre del paso
        run: cd backend-cv && npm ci                                      # Comando para instalar dependencias

      - name: Crear config.json temporal para Sequelize CLI
        run: |
          cat <<EOF > backend-cv/config/config.json
          {
            "test": {
              "username": "${DB_USER}",
              "password": "${DB_PASS}",
              "database": "${DB_NAME}",
              "host": "${DB_HOST}",
              "port": ${DB_PORT},
              "dialect": "postgres"
            }
          }
          EOF

      - name: Verificar contenido de config.json
        run: cat backend-cv/config/config.json

      - name: Ejecutar migraciones
        run: cd backend-cv && npx sequelize-cli db:migrate --env test
        env:
          DB_USER: ${{ env.DB_USER }}
          DB_PASS: ${{ env.DB_PASS }}
          DB_NAME: ${{ env.DB_NAME }}
          DB_HOST: ${{ env.DB_HOST }}
          DB_PORT: ${{ env.DB_PORT }}

      - name: Borrar config.json temporal
        run: rm backend-cv/config/config.json

      - name: Ejecutar tests unitarios
        run: cd backend-cv && npm run test:unit

      - name: Ejecutar tests de integración
        run: cd backend-cv && npm run test:integration

      - name: Reportar éxito
        if: success()
        run: echo "API funcional en Node ${{ matrix.node }} (unitarios e integración OK)"

      - name: Reportar error
        if: failure()
        run: echo "Falla detectada en los tests para Node ${{ matrix.node }} (unitarios o integración)"